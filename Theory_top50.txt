1.	What is a Test Environment?

A testing environment is a setup of software and hardware for the testing teams to execute test cases. In other words, it supports test execution with hardware, software and network configured. Test environment configuration must mimic the production environment in order to uncover any environment/configuration related issues.
A typical Environmental Configuration for a web-based application is given below:
Web Server – IIS/ Apache
Database – MS SQL
OS – Windows/ Linux
Browser – Chrome / FireFox
Java version – version 6

2.	What is the difference between build and release?

The main difference between Build and Release in Software Testing is that Build is a version of a software the development team hands over to the testing team for testing purposes while Release is a software the testing team hands over to the customer. 
Build refers to the standalone software artefact generated after converting the source code to an executable code that can be run on a computer. A release, on the other hand, is the distribution of the final version of an application.
•	What is Build in Software Testing?
After developing the software module, developers convert the source codes into a standalone form or an executable code. Then the development team hands over the build to the testing team to perform testing. Build is in the testing phase; it may have already undergone testing or not. The software testing team checks this build. If it consists of multiple bugs and if it does not meet the requirements, then the software testing team rejects that build.  Builds occur prior to the release, and they are generated more frequently.
•	What is Release in Software Testing?
The release is the final application after completing development and testing. After testing the build, the testing team certifies that software and delivers it to the customer. It is possible for one release to have several builds. Therefore, it is the software delivered to the customer after completing the development and testing phases. Moreover, the release is based on builds, and it can have several builds.

3.	What are the phases of testing?

3.1.	Unit Testing
Is the first level of testing and it involves testing individual modules of the software. It is usually performed by developers.
3.2.	Integration Testing
Is performed after unit testing. In integration testing, we test the group of related modules. It aims at finding interfacing issues between the modules.
There are different types of integration testing:
•	Big bang Integration Testing – In big bang integration testing, testing starts only after all the modules are integrated.
•	Top-down Integration Testing – In top-down integration, testing/integration starts from top modules to lower-level modules.
•	Bottom-up Integration Testing – In bottom-up integration, testing starts from lower-level modules to higher-level module up in the hierarchy.
•	Hybrid Integration Testing – Hybrid integration testing is the combination of both Top-down and bottom-up integration testing. In this approach, the integration starts from the middle layer and testing is carried out in both the direction.

3.3.	System Testing
Is the level of testing where the complete software is tested as a whole. The conformance of the application with its business requirements is checked in system testing.
3.4.	Acceptance Testing
Acceptance testing is the final stage of the QA test cycle. It helps evaluate if the application is ready to be released for user consumption. Typically, testers carry out this phase with the help of the representatives of the customer who test the application by using it. Therefore, they will check if the application can perform all the functions specified.

4. What is an impact analysis?
Impact Analysis is used in software testing to define all the risks associated with any kind of changes in a product being tested. 
It is an estimation of changes on different levels of development documentation, testing documentation and components for the introduction of these changes and registration them in corresponding requests.(ISTQB glossary)

5. Criteria for selecting appropriate test.

6. The seven principles of testing:
1. Testing shows the presence of defects, not their absence
2. Exhaustive testing is impossible
3. Early testing saves time and money
4. Defects cluster together
5. Beware of the pesticide paradox
6. Testing is context-dependent
7. Absence-of-errors is a fallacy

7. What is independent testing?
Independent testing corresponds to an independent team, who involve in testing activities other than developer to avoid author bias and is often more effective at finding defects and failures.
Levels of Independent Testing
The following list shows the increasing levels of independence for testing:
•	Testing done by developer himself
•	Independent testers ceded to the development team
•	Independent Testing Team within Organisation
•	Independent Testers of different Organisation
•	Outsourced test team members of other organisation
Benefits:
•	The tester sees each defect in a neutral perspective
•	The tester is totally unbiased
•	The tester sees what has been built rather than what the developer thought
•	The tester makes no assumptions regarding quality
Disadvantages:
•	Isolation from the development team can sometimes lead to outdated documentation reference.
•	The independent test execution is normally the last stage and affected by any delays earlier in the process.
•	Developers might be irresponsible for quality as they might assume that independent testing team is there to find the issues within the system
•	Independent testing can sometimes act as a hindrance to communication.

8. What is left shift testing?
Shift Left is a practice intended to find and prevent defects early in the software delivery process. The idea is to improve quality by moving tasks to the left as early in the lifecycle as possible. Shift Left testing means testing earlier in the software development process.








